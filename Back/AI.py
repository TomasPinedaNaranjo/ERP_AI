# ai.py
import openai
from config import OPENAI_API_KEY

# Initialize OpenAI client
openai_client = openai.Client(
    base_url="https://openrouter.ai/api/v1",
    api_key="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"
)

def generate_sql_query(user_input):
    prompt = f"""
Eres un experto en escribir consultas de Supabase usando Python. Tu tarea es generar una consulta de Supabase válida basada en la solicitud del usuario.
Debes retornar **solo la consulta** para la base de datos pedida por el usuario, sin ningún texto adicional, explicaciones o comentarios.
### Database Schema
El siguiente es el esquema de la tabla que estarás consultando:
<database_schema>
create table public.clients (
  id bigint generated by default as identity not null,
  name text not null,
  payments integer null,
  constraint clients_pkey primary key (id)
) TABLESPACE pg_default;
</database_schema>

### User Request
<user_request> {user_input} </user_request>

### Tarea:
- Generar una consulta de Supabase válida en Python usando el cliente de Supabase.
- La consulta debe coincidir con la solicitud del usuario y cumplir con el esquema de la base de datos.
- Devolver solo la consulta como código Python válido, sin encerrarla entre comillas.
"""
    try:
        completion = openai_client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {"role": "system", "content": "Tu eres un asistente útil que genera consultas de Supabase en sintaxis de Python. Devuelve solo la consulta como código Python válido, sin encerrarla entre comillas."},
                {"role": "user", "content": prompt},
            ]
        )
        

        if completion is None:
            raise ValueError("API retorno none, intenta de nuevo")
        return completion.choices[0].message.content
    except Exception as e:
        print(f"Error generated: {e}")
        return "No se pudo generar una consulta. Por favor intente de nuevo."
    


def generate_user_answer(user_input, query_result):
    prompt = f"""Dado una pregunta del usuario y unas columnas de sql, responder la pregunta del usuario apropiadamente <user_question> {user_input} </user_question> <sql_response>${query_result} </sql_response>
    Debes retornar una respuesta clara al usuario basada en la pregunta y los resultados de la consulta SQL. No debes incluir ninguna información adicional, solo la respuesta al usuario.
    """
    
    try: 
        completion = openai_client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {"role": "system", "content": "Tu eres un asistente que ayuda a generar respuestas al usuario usando su entrada y una variable query_result, consultas en sintaxis de Python., vas a retornar solo la respuesta al usuario."},
                {"role": "user", "content": prompt},
            ]
        )
        if completion is None:
            raise ValueError("API return none, try again")
        return completion.choices[0].message.content
    except Exception as e:
        print(f"Error generated: {e}")
        return "No se pudo generar una respuesta. Por favor intente de nuevo."
    
    
# Regenerate the query based on the error message

def regenerate_sql_query(user_input, error_message):
    prompt = f"""
Eres un experto en escribir consultas de Supabase usando Python. Tu tarea es corregir una consulta de Supabase que falló al ejecutarse.
Al corregir la consulta, debes asegurarte de que coincida con la solicitud del usuario y cumpla con el esquema de la base de datos.
Retornaras **solamenet la consulta corregida** como código Python válido, sin encerrarla entre comillas, no debes agregar ningun texto adicional.
### Database Schema
El siguiente es el esquema de la tabla que estarás consultando:
<database_schema>
create table public.clients (
  id bigint generated by default as identity not null,
  name text not null,
  payments integer null,
  constraint clients_pkey primary key (id)
) TABLESPACE pg_default;
</database_schema>

### User Request
<user_request> {user_input} </user_request>

### Error Message
<error_message> {error_message} </error_message>

### Tarea:
- Corregir la consulta de Supabase basada en el mensaje de error.
- La consulta debe coincidir con la solicitud del usuario y cumplir con el esquema de la base de datos.
- Devolver solo la consulta corregida como código Python válido, sin encerrarla entre comillas.
"""
    try: 
        completion = openai_client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {"role": "system", "content": "Tu eres un asistente útil que corrige consultas de Supabase en sintaxis de Python. Devuelve solo la consulta corregida como código Python válido, sin encerrarla entre comillas."},
                {"role": "user", "content": prompt},
            ]
        )
        if completion is None:
            raise ValueError("API return none, try again")
        
        return completion.choices[0].message.content
    
    except Exception as e:
        print(f"Error generated: {e}")
        return "No se pudo corregir la consulta. Por favor intente de nuevo."
    